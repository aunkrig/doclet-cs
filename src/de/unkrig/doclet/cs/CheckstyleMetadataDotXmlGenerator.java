
/*
 * de.unkrig.doclet.cs - A doclet which generates metadata documents for a CheckStyle extension
 *
 * Copyright (c) 2014, Arno Unkrig
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
 * following conditions are met:
 *
 *    1. Redistributions of source code must retain the above copyright notice, this list of conditions and the
 *       following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 *       following disclaimer in the documentation and/or other materials provided with the distribution.
 *    3. The name of the author may not be used to endorse or promote products derived from this software without
 *       specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

package de.unkrig.doclet.cs;

import java.io.PrintWriter;
import java.util.Collection;

import com.sun.javadoc.ClassDoc;
import com.sun.javadoc.DocErrorReporter;
import com.sun.javadoc.FieldDoc;
import com.sun.javadoc.MethodDoc;
import com.sun.javadoc.RootDoc;
import com.sun.javadoc.Tag;

import de.unkrig.commons.nullanalysis.Nullable;
import de.unkrig.doclet.cs.MediawikiGenerator.Longjump;

/**
 * Produces the 'checkstyle-metadata.xml' and 'checkstyle-metadata.properties' files for ECLIPSE-CS.
 * @author Arno
 *
 */
public final
class CheckstyleMetadataDotXmlGenerator {

    private CheckstyleMetadataDotXmlGenerator() {}

    /**
     * Prints the 'checkstyle-metadata.xml' file.
     */
    public static void
    generate(final Collection<ClassDoc> classDocs, final PrintWriter pw, RootDoc rootDoc) {
        pw.printf(
            ""
            + "<?xml version=\"1.0\" encoding=\"UTF-8\"?>%n"
            + "<!DOCTYPE checkstyle-metadata PUBLIC%n"
            + "\"-//eclipse-cs//DTD Check Metadata 1.1//EN\"%n"
            + "\"http://eclipse-cs.sourceforge.net/dtds/checkstyle-metadata_1_1.dtd\">%n"
            + "<checkstyle-metadata>%n"
            + "%n"
            + "    <!-- This file was generated by the CS doclet; see http://cs-contrib.unkrig.de -->"
            + "%n"
        );
        for (ClassDoc classDoc : classDocs) {
            try {

                // SUPPRESS CHECKSTYLE LineLength:3
                String  ruleGroup   = DocletUtil.optionalTag(classDoc, "@cs-rule-group", rootDoc);
                String  ruleParent  = DocletUtil.optionalTag(classDoc, "@cs-rule-parent", rootDoc);
                Boolean hasSeverity = DocletUtil.optionalBooleanTag(classDoc, "@cs-rule-has-severity", rootDoc);

                if (ruleGroup == null && ruleParent == null) continue;

                pw.printf((
                    ""
                    + "%n"
                    + "    <!-- %1$s -->%n"
                    + "%n"
                    + "    <rule-group-metadata name=\"%3$s\" priority=\"999\">%n"
                    + "        <rule-metadata%n"
                    + "            internal-name=\"%2$s\"%n"
                    + "            parent=\"%4$s\"%n"
                    + (hasSeverity == null ? "" : "            hasSeverity=\"%5$s\"%n")
                    + "            name=\"%%%1$s.name\"%n"
                    + "        >%n"
                    + "            <alternative-name internal-name=\"%2$s\" />%n"
                    + "            <description>%%%2$s.desc</description>%n"
                ), classDoc.simpleTypeName(), classDoc.qualifiedName(), ruleGroup, ruleParent, hasSeverity);

                boolean isFirstProperty = true; // SUPPRESS CHECKSTYLE UsageDistance
                for (MethodDoc methodDoc : classDoc.methods()) {

                    // SUPPRESS CHECKSTYLE LineLength:6
                    String       propertyName         = DocletUtil.optionalTag(methodDoc, "@cs-property-name",                   rootDoc);
                    String       datatype             = DocletUtil.optionalTag(methodDoc, "@cs-property-datatype",               rootDoc);
                    String       defaultValue         = DocletUtil.optionalTag(methodDoc, "@cs-property-default-value",          rootDoc);
                    String       overrideDefaultValue = DocletUtil.optionalTag(methodDoc, "@cs-property-override-default-value", rootDoc); // SUPPRESS CHECKSTYLE LineLength
                    final String optionProvider       = DocletUtil.optionalTag(methodDoc, "@cs-property-option-provider",        rootDoc); // SUPPRESS CHECKSTYLE LineLength
                    final Tag[]  valueOptions         = methodDoc.tags("@cs-property-value-option");

                    if (
                        propertyName == null
                        && datatype == null
                        && defaultValue == null
                        && overrideDefaultValue == null
                    ) continue;

                    // Some consistency checks.
                    String methodName = methodDoc.name();
                    if (!methodName.startsWith("set")) {
                        rootDoc.printError(methodDoc.position(), "Method is not a setter");
                        continue;
                    }
                    if (!methodName.substring(3).equalsIgnoreCase(propertyName)) {
                        rootDoc.printError(methodDoc.position(), "Property name does not match method name");
                        continue;
                    }
                    if (methodDoc.parameters().length != 1) {
                        rootDoc.printError(methodDoc.position(), "Setter must have exactly one parameter");
                        continue;
                    }
                    if (optionProvider != null && valueOptions.length > 0) {
                        rootDoc.printError(
                            methodDoc.position(),
                            "@cs-property-option-provider and @cs-property-value-option are mutually exclusive"
                        );
                        continue;
                    }

                    // Generate property description.
                    if (isFirstProperty) {
                        pw.printf("%n");         // Insert one blank line before the first property description.
                        isFirstProperty = false;
                    }
                    pw.printf(
                        (
                            ""
                            + "            <property-metadata%n"
                            + "                name=\"%2$s\"%n"
                            + "                datatype=\"%3$s\"%n"
                            + (defaultValue         == null ? "" : "                default-value=\"%4$s\"%n")
                            + (overrideDefaultValue == null ? "" : "                override-default-value=\"%5$s\"%n")
                            + "            >%n"
                            + "                <description>%%%1$s.%2$s</description>%n"
                        ),
                        classDoc.simpleTypeName(),
                        propertyName,
                        datatype,
                        defaultValue,
                        overrideDefaultValue
                    );
                    if (optionProvider != null) {
                        pw.printf("                <enumeration option-provider=\"%s\" />%n", optionProvider);
                    }
                    if (valueOptions.length > 0) {
                        pw.printf("                <enumeration>%n");
                        for (Tag valueOption : valueOptions) {
                            pw.printf(
                                "                    <property-value-option value=\"%s\" />%n",
                                valueOption.text()
                            );
                        }
                        pw.printf("                </enumeration>%n");
                    }
                    pw.printf("            </property-metadata>%n");
                }

                Tag[] quickfixes = classDoc.tags("@cs-quickfix-classname");
                if (quickfixes.length > 0) {
                    pw.printf("%n");
                    for (Tag quickfix : quickfixes) {
                        pw.printf("            <quickfix classname=\"%s\" />%n", quickfix.text());
                    }
                }

                for (FieldDoc fd : classDoc.fields()) {

                    String message = DocletUtil.optionalTag(fd, "@cs-message", rootDoc);
                    if (message == null) continue;

                    String
                    messageKey = CheckstyleMetadataDotXmlGenerator.getMessageKeyFromConstantValue(fd, rootDoc);
                    if (messageKey == null) continue;

                    pw.printf("            <message-key key=\"%s\" />%n", messageKey);
                }
                pw.printf((
                    ""
                    + "        </rule-metadata>%n"
                    + "    </rule-group-metadata>%n"
                ));
            } catch (Longjump l) {
                ;
            }
        }
        pw.printf("</checkstyle-metadata>%n");
    }

    @Nullable private static String
    getMessageKeyFromConstantValue(FieldDoc fd, DocErrorReporter errorReporter) {

        Object o = fd.constantValue();
        if (o == null) {
            errorReporter.printError(
                fd.position(),
                "Field '" + fd.name() + "' has a '@cs-message' doc tag, but not a constant value"
            );
            return null;
        }

        if (!(o instanceof String)) {
            errorReporter.printError(
                fd.position(),
                "Constant '" + fd.name() + "' must have type 'String'"
            );
            return null;
        }

        return (String) o;
    }
}
