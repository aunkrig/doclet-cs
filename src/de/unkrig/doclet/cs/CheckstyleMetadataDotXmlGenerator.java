
/*
 * de.unkrig.doclet.cs - A doclet which generates metadata documents for a CheckStyle extension
 *
 * Copyright (c) 2014, Arno Unkrig
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
 * following conditions are met:
 *
 *    1. Redistributions of source code must retain the above copyright notice, this list of conditions and the
 *       following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 *       following disclaimer in the documentation and/or other materials provided with the distribution.
 *    3. The name of the author may not be used to endorse or promote products derived from this software without
 *       specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

package de.unkrig.doclet.cs;

import java.io.PrintWriter;
import java.util.Collection;

import com.sun.javadoc.RootDoc;

import de.unkrig.doclet.cs.CsDoclet.Rule;
import de.unkrig.doclet.cs.CsDoclet.RuleProperty;
import de.unkrig.doclet.cs.CsDoclet.RuleQuickfix;

/**
 * Produces the 'checkstyle-metadata.xml' and 'checkstyle-metadata.properties' files for ECLIPSE-CS.
 * @author Arno
 *
 */
public final
class CheckstyleMetadataDotXmlGenerator {

    private CheckstyleMetadataDotXmlGenerator() {}

    /**
     * Prints the 'checkstyle-metadata.xml' file.
     */
    public static void
    generate(final Collection<Rule> rules, final PrintWriter pw, final RootDoc rootDoc) {

        pw.printf(
            ""
            + "<?xml version=\"1.0\" encoding=\"UTF-8\"?>%n"
            + "<!DOCTYPE checkstyle-metadata PUBLIC%n"
            + "\"-//eclipse-cs//DTD Check Metadata 1.1//EN\"%n"
            + "\"http://eclipse-cs.sourceforge.net/dtds/checkstyle-metadata_1_1.dtd\">%n"
            + "<checkstyle-metadata>%n"
            + "%n"
            + "    <!-- This file was generated by the CS doclet; see http://cs-contrib.unkrig.de -->"
            + "%n"
        );

        for (Rule rule : rules) {

            pw.printf((
                ""
                + "%n"
                + "    <!-- %1$s -->%n"
                + "%n"
                + "    <rule-group-metadata name=\"%3$s\" priority=\"999\">%n"
                + "        <rule-metadata%n"
                + "            internal-name=\"%2$s\"%n"
                + "            parent=\"%4$s\"%n"
                + (rule.hasSeverity() == null ? "" : "            hasSeverity=\"%5$s\"%n")
                + "            name=\"%%%1$s.name\"%n"
                + "        >%n"
                + "            <alternative-name internal-name=\"%2$s\" />%n"
                + "            <description>%%%1$s.desc</description>%n"
            ), rule.simpleName(), rule.internalName(), rule.group(), rule.parent(), rule.hasSeverity());

            boolean isFirstProperty = true;
            for (RuleProperty property : rule.properties()) {

                if (isFirstProperty) {
                    pw.printf("%n");         // Insert one blank line before the first property description.
                    isFirstProperty = false;
                }

                pw.printf(
                    (
                        ""
                        + "            <property-metadata%n"
                        + "                name=\"%2$s\"%n"
                        + "                datatype=\"%3$s\"%n"
                        + (property.defaultValue()         == null ? "" : "                default-value=\"%4$s\"%n")
                        + (property.overrideDefaultValue() == null ? "" : "                override-default-value=\"%5$s\"%n") // SUPPRESS CHECKSTYLE LineLength
                        + "            >%n"
                        + "                <description>%%%1$s.%2$s</description>%n"
                    ),
                    rule.simpleName(),
                    property.name(),
                    property.datatype(),
                    property.defaultValue(),
                    property.overrideDefaultValue()
                );
                Class<?> optionProvider = property.optionProvider();
                if (optionProvider != null) {
                    pw.printf("                <enumeration option-provider=\"%s\" />%n", optionProvider.getName());
                }
                String[] valueOptions = property.valueOptions();
                if (valueOptions != null) {
                    pw.printf("                <enumeration>%n");
                    for (String valueOption : valueOptions) {
                        pw.printf(
                            "                    <property-value-option value=\"%s\" />%n",
                            valueOption
                        );
                    }
                    pw.printf("                </enumeration>%n");
                }
                pw.printf("            </property-metadata>%n");
            }

            if (rule.quickfixes().length > 0) {
                pw.printf("%n");
                for (RuleQuickfix quickfix : rule.quickfixes()) {
                    pw.printf("            <quickfix classname=\"%s\" />%n", quickfix.className());
                }
            }

            for (String messageKey : rule.messages().keySet()) {
                pw.printf("            <message-key key=\"%s\" />%n", messageKey);
            }

            pw.printf((
                ""
                + "        </rule-metadata>%n"
                + "    </rule-group-metadata>%n"
            ));
        }

        pw.printf("</checkstyle-metadata>%n");
    }
}
