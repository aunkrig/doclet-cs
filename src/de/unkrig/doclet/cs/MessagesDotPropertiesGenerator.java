
/*
 * de.unkrig.doclet.cs - A doclet which generates metadata documents for a CheckStyle extension
 *
 * Copyright (c) 2014, Arno Unkrig
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
 * following conditions are met:
 *
 *    1. Redistributions of source code must retain the above copyright notice, this list of conditions and the
 *       following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 *       following disclaimer in the documentation and/or other materials provided with the distribution.
 *    3. The name of the author may not be used to endorse or promote products derived from this software without
 *       specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

package de.unkrig.doclet.cs;

import java.io.PrintWriter;
import java.util.Collection;

import com.sun.javadoc.ClassDoc;
import com.sun.javadoc.DocErrorReporter;
import com.sun.javadoc.FieldDoc;

import de.unkrig.commons.nullanalysis.Nullable;
import de.unkrig.doclet.cs.MediawikiGenerator.Longjump;

/**
 * Produces the 'checkstyle-metadata.xml' and 'checkstyle-metadata.properties' files for ECLIPSE-CS.
 * @author Arno
 *
 */
public final
class MessagesDotPropertiesGenerator {

    private MessagesDotPropertiesGenerator() {}

    /**
     * Prints the 'checkstyle-metadata.properties' file.
     */
    public static void
    generate(
        final Collection<ClassDoc> classDocs,
        final PrintWriter          mp,
        DocErrorReporter           errorReporter
    ) {

        mp.printf(
            ""
            + "%n"
            + "# This file was generated by the CS doclet; see http://cs-contrib.unkrig.de%n"
            + "%n"
            + "# Custom check messages, in alphabetical order.%n"
        );

        for (ClassDoc classDoc : classDocs) {

            try {
                String ruleName = DocletUtil.optionalTag(classDoc, "@cs-rule-name", errorReporter);
                if (ruleName == null) continue;

                mp.printf((
                    ""
                    + "%n"
                    + "# --------------- %1$s ---------------%n"
                ), ruleName);

                for (FieldDoc fd : classDoc.fields()) {

                    String message = DocletUtil.optionalTag(fd, "@cs-message", errorReporter);
                    if (message == null) continue;

                    String
                    messageKey = MessagesDotPropertiesGenerator.getMessageKeyFromConstantValue(fd, errorReporter);
                    if (messageKey == null) continue;

                    mp.printf("%1$-60s = %2$s%n", messageKey, message);
                }
            } catch (Longjump c) {
                ;
            }
        }
    }

    @Nullable private static String
    getMessageKeyFromConstantValue(FieldDoc fd, DocErrorReporter errorReporter) {

        Object o = fd.constantValue();
        if (o == null) {
            errorReporter.printError(
                fd.position(),
                "Field '" + fd.name() + "' has a '@cs-message' doc tag, but not a constant value"
            );
            return null;
        }

        if (!(o instanceof String)) {
            errorReporter.printError(
                fd.position(),
                "Constant '" + fd.name() + "' must have type 'String'"
            );
            return null;
        }

        return (String) o;
    }
}
