
/*
 * de.unkrig.doclet.cs - A doclet which generates metadata documents for a CheckStyle extension
 *
 * Copyright (c) 2014, Arno Unkrig
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
 * following conditions are met:
 *
 *    1. Redistributions of source code must retain the above copyright notice, this list of conditions and the
 *       following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 *       following disclaimer in the documentation and/or other materials provided with the distribution.
 *    3. The name of the author may not be used to endorse or promote products derived from this software without
 *       specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

package de.unkrig.doclet.cs;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringReader;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.SortedMap;
import java.util.TreeMap;

import com.sun.javadoc.ClassDoc;
import com.sun.javadoc.MethodDoc;
import com.sun.javadoc.RootDoc;

import de.unkrig.doclet.cs.MediawikiGenerator.Longjump;

/**
 * Produces the 'checkstyle-metadata.xml' and 'checkstyle-metadata.properties' files for ECLIPSE-CS.
 * @author Arno
 *
 */
public final
class CheckstyleMetadataDotPropertiesGenerator {

    private CheckstyleMetadataDotPropertiesGenerator() {}

    /**
     * Prints the 'checkstyle-metadata.properties' file.
     */
    public static void
    generate(
        final Collection<ClassDoc> classDocs,
        final PrintWriter          cmp,
        RootDoc                    rootDoc
    ) throws IOException {

        cmp.printf(
            ""
            + "%n"
            + "# This file was generated by the CS doclet; see http://cs-contrib.unkrig.de.%n"
            + "%n"
            + "# Rule groups:%n"
        );

        SortedMap<String, String> groups = new TreeMap<String /*group*/, String /*groupName*/>();
        for (ClassDoc classDoc : classDocs) {

            try {
                String ruleGroup     = DocletUtil.optionalTag(classDoc, "@cs-rule-group", rootDoc);
                String ruleGroupName = DocletUtil.optionalTag(classDoc, "@cs-rule-group-name", rootDoc);

                if (ruleGroup == null && ruleGroupName == null) continue;

                if (ruleGroup == null) {
                    rootDoc.printError(classDoc.position(), "'@cs-rule-group' doc tag missing");
                    continue;
                }

                if (!ruleGroup.startsWith("%")) continue;

                ruleGroup = ruleGroup.substring(1);

                String standardGroupName = CheckstyleMetadataDotPropertiesGenerator.STANDARD_GROUPS.get(ruleGroup);
                if (standardGroupName == null) {
                    if (ruleGroupName == null) {
                        rootDoc.printError(classDoc.position(), (
                            ""
                            + "'@cs-rule-group-name' missing (must be specified because '"
                            + ruleGroup
                            + "' is not one of the CheckStyle standard groups)"
                        ));
                        continue;
                    }
                } else {
                    if (ruleGroupName == null) {
                        ruleGroupName = standardGroupName;
                    } else
                    if (ruleGroupName.equals(standardGroupName)) {
                        ;
                    } else
                    {
                        rootDoc.printWarning(classDoc.position(), (
                            ""
                            + "Group name differs from CS's standard group name '"
                            + standardGroupName
                            + "' - you should fix your group name, because otherwise editors will display TWO groups"
                        ));
                    }
                }

                String existingGroupName = groups.get(ruleGroup);
                if (existingGroupName != null && !existingGroupName.equals(ruleGroupName)) {
                    rootDoc.printError(classDoc.position(), (
                        ""
                        + "You define two different names for rule group '"
                        + ruleGroup
                        + "': '"
                        + existingGroupName
                        + "' and now '"
                        + ruleGroupName
                        + "'; you cannot have two different names for the same group in one package"
                    ));
                    continue;
                }

                groups.put(ruleGroup, ruleGroupName);
            } catch (Longjump c) {
                ;
            }
        }
        for (Entry<String, String> e : groups.entrySet()) {
            cmp.printf("%-16s = %s%n", e.getKey(), e.getValue());
        }

        cmp.printf(
            ""
            + "%n"
            + "# Custom checks, in alphabetical order.%n"
        );

        for (ClassDoc classDoc : classDocs) {

            try {
                String ruleName = DocletUtil.optionalTag(classDoc, "@cs-rule-name", rootDoc);
                if (ruleName == null) continue;

                String ruleDescription = DocletUtil.commentText(classDoc);
                if (ruleDescription == null) {
                    rootDoc.printError(classDoc.position(), "Rule lacks a description");
                    throw new Longjump();
                }

                cmp.printf((
                    ""
                    + "%n"
                    + "# --------------- %1$s ---------------%n"
                    + "%n"
                    + "%2$s.name = %1$s%n"
                    + "%2$s.desc =\\%n"
                ), ruleName, classDoc.qualifiedName());

                if (classDoc.tags("@cs-quickfix-classname").length > 0) {
                    ruleDescription += String.format("%n%nQuickfixes are available for this check.");
                }

                ruleDescription = DocletUtil.javadocTextToHtml(ruleDescription, classDoc, rootDoc);

                CheckstyleMetadataDotPropertiesGenerator.printPropertyValue(ruleDescription, cmp);

                for (MethodDoc methodDoc : classDoc.methods()) {

                    String name        = DocletUtil.optionalTag(methodDoc, "@cs-property-name", rootDoc);
                    String description = DocletUtil.optionalTag(methodDoc, "@cs-property-desc", rootDoc);

                    if (name == null && description == null) continue;

                    // Get the 'property description'. This is a bit complicated because the methods 'comment text' and
                    // and the '@cs-property-desc' doc tag must both be taken into account.
                    // We also check whether there is HTML markup in the description, because ECLIPSE-CS does not
                    // support that.
                    if (description == null) {
                        description = DocletUtil.commentText(methodDoc);
                        if (description == null) {
                            rootDoc.printError(methodDoc.position(), (
                                ""
                                + "Method has neither a comment text nor a '@cs-property-text' tag; "
                                + "at least one of them must exist (and must not contain HTML markup)"
                            ));
                            continue;
                        }
                        description = DocletUtil.javadocTextToHtml(description, methodDoc, rootDoc);
                        if (CsDoclet.containsHtmlMarkup(description)) {
                            rootDoc.printWarning(methodDoc.position(), (
                                ""
                                + "The coment text appears to contain HTML markup. "
                                + "ECLIPSE-CS cannot handle HTML markup in property descriptions; "
                                + "it is therefore recommended to add a '@cs-property-desc' tag without markup"
                            ));
                        }
                    } else {
                        description = DocletUtil.javadocTextToHtml(description, methodDoc, rootDoc);
                        if (CsDoclet.containsHtmlMarkup(description)) {
                            rootDoc.printWarning(methodDoc.position(), (
                                ""
                                + "The text after the '@cs-property-desc' tag appears to contain HTML markup; "
                                + "ECLIPSE-CS cannot handle HTML markup in property descriptions"
                            ));
                        }
                    }

                    // Some consistency checks.
                    String methodName = methodDoc.name();
                    if (!methodName.startsWith("set")) {
                        rootDoc.printError(methodDoc.position(), "Method is not a setter");
                        continue;
                    }
                    if (!methodName.substring(3).equalsIgnoreCase(name)) {
                        rootDoc.printError(methodDoc.position(), "Property name does not match method name");
                        continue;
                    }
                    if (methodDoc.parameters().length != 1) {
                        rootDoc.printError(methodDoc.position(), "Setter must have exactly one parameter");
                        continue;
                    }

                    // Generate property description.
                    cmp.printf(
                        "%1$-68s = %2$s%n",
                        classDoc.qualifiedName() + '.' + name,
                        description
                    );
                }
            } catch (Longjump c) {
                ;
            }
        }
    }

    private static void
    printPropertyValue(String text, final PrintWriter pw) throws IOException {

        boolean isFirst = true;
        for (BufferedReader br = new BufferedReader(new StringReader(text));;) {
            String line = br.readLine();
            if (line == null) break;

            if (isFirst) {
                isFirst = false;
            } else {
                pw.println("\\n\\");
            }

            pw.print('\t');
            if (line.startsWith(" ")) pw.print('\\');
            pw.print(line);
        }

        pw.println();
    }

    /** Maps group id to (english) group name, as defined by CheckStyle. */
    private static final Map<String, String> STANDARD_GROUPS;
    static {
        Map<String, String> m = new HashMap<String, String>();
        m.put("Annotation.group",    "Annotations");
        m.put("Javadoc.group",       "Javadoc Comments");
        m.put("Naming.group",        "Naming Conventions");
        m.put("Headers.group",       "Headers");
        m.put("Imports.group",       "Imports");
        m.put("Sizes.group",         "Size Violations");
        m.put("Whitespace.group",    "Whitespace");
        m.put("Regexp.group",        "Regexp");
        m.put("Modifiers.group",     "Modifiers");
        m.put("Blocks.group",        "Blocks");
        m.put("Coding.group",        "Coding Problems");
        m.put("Design.group",        "Class Design");
        m.put("Duplicates.group",    "Duplicates");
        m.put("Metrics.group",       "Metrics");
        m.put("Miscellaneous.group", "Miscellaneous");
        m.put("Other.group",         "Other");
        m.put("Filters.group",       "Filters");
        STANDARD_GROUPS = Collections.unmodifiableMap(m);
    }
}
